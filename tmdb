#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import json
import logging
import argparse
import configparser

# Import requests
try:
    import requests
except ImportError:
    print("It seams `requests` is not installed. Please pip install requests")
    sys.exit(1)

# Import BeautifulSoup
try:
    from bs4 import BeautifulSoup
except ImportError:
    print("It seams `BeautifulSoup` is not installed. Please pip install beautifulsoup4")
    sys.exit(1)

# Import texttable
try:
    import texttable
except ImportError:
    print("It seams `texttable` is not installed. Please pip install texttable")
    sys.exit(1)

# Define global variable
TMDB_API_URL = 'https://api.themoviedb.org/3/'
TMDB_URL = 'https://www.themoviedb.org/'
IMDB_URL = 'http://www.imdb.com/title/'


def configLog(debug):
    "Configure logging"
    logfile = os.path.basename(__file__) + '.log' if debug == True else None
    loglevel = logging.DEBUG if logfile is not None else None
    logging.basicConfig(format='%(asctime)s [%(module)14s][%(levelname)8s] %(message)s', filename=logfile, level=loglevel)


def printTable(list, width):
    "Print content from list to a table"
    if len(list) != 1:
        if len(list) == 2:
            print('Find 1 result\n')
        else:
            print('Find ' + str(len(list) - 1) + ' results\n')

        table = texttable.Texttable()
        table.set_cols_width(width)
        table.add_rows(list)
        print(table.draw())

    else:
        print('Nothing Found!')


def getIMDBGenre(id):
    "Fetch genre information from IMDB"
    url = IMDB_URL + id
    logging.debug('imdb url:\n' + str(url))

    genres = BeautifulSoup(requests.get(url).text, "lxml").find_all('span', {'class': 'itemprop', 'itemprop': 'genre'})
    logging.debug('imdb genre:\n' + str(genres))

    return ', '.join([genre.getText() for genre in genres])


def getIMDBRating(id):
    "Fetch rating information from IMDB"
    url = IMDB_URL + id
    logging.debug('imdb url:\n' + str(url))

    value = BeautifulSoup(requests.get(url).text, "lxml").find('div', {'class': 'ratingValue'})
    logging.debug('imdb rating:\n' + str(value))

    if value is not None:
        return value.strong['title'].replace('based on ', '(').replace(' user ratings', ')')
    return ""


def GET(url):
    "GET request call"
    logging.debug('url:\n' + str(url))

    response = requests.request("GET", url)
    if response.status_code != 200:
        logging.error(str(response.status_code) + ' ' + url)

    logging.debug('response json:\n' + str(response.json()))

    return response.json()


def exit():
    "Exit!"
    logging.shutdown()
    sys.exit(1)


def collectData(data):
    "Collect data from Movie, TV and TV season"

    logging.debug('data:\n' + str(data))

    # Initialize variables
    imdbId = itemName = itemDate = itemGenre = itemTime = itemRating = itemLinks = ''

    #   itemName
    #   itemDate
    #   itemTime
    #   itemLinks
    # movie
    if 'original_title' in data.keys():
        itemName = data['original_title']
        itemDate = data['release_date'] or ''
        itemTime = str(data['runtime'])
        itemLinks = TMDB_URL + 'movie/' + str(data['id'])
    # tv
    elif 'original_name' in data.keys():
        itemName = data['original_name']
        itemDate = data['first_air_date'] or ''
        itemTime = str(data['episode_run_time']) + ' ' + str(data['number_of_seasons']) + 'S'
        itemLinks = TMDB_URL + 'tv/' + str(data['id'])
    # tv episode
    else:
        itemName = 'S' + str(data['season_number']) + 'E' + str(data['episode_number']) + ' ' + data['name']
        itemDate = data['air_date'] or ''

    #   itemRating
    #   itemGenre
    itemRating = 'TMDB: ' + str(data['vote_average']) + '(' + str(data['vote_count']) + ')'

    if 'imdb_id' in data.keys():
        imdbId = data['imdb_id']

    if imdbId:
        itemGenre = getIMDBGenre(imdbId)
        itemLinks += '\n' + IMDB_URL + imdbId
        imdbRating = getIMDBRating(imdbId)
        if imdbRating:
            itemRating += '\nIMDB: ' + imdbRating
    elif 'genres' in data.keys():
        itemGenre = str(', '.join([g['name'] for g in data['genres']]))
    else:
        itemGenre = ''

    logging.debug('collect data:\n' + '\n'.join([itemName, itemDate, itemGenre, itemTime, itemRating, itemLinks]))
    return [itemName, itemDate, itemGenre, itemTime, itemRating, itemLinks]


def main():
    # Setup parameter
    #   run script with -d, active debug mode (log file will be created)
    parser = argparse.ArgumentParser()
    parser.add_argument('searchtext', nargs='+', help='search text')
    parser.add_argument('-y', '--year',   nargs='?', help='year of release')
    parser.add_argument('-t', '--tv',   action='store_true', help='TV show')
    parser.add_argument('-s', '--season',   nargs='?', help='TV season number')
    parser.add_argument('-d', '--debug',  action='store_true', dest="debug", help='active debug log')
    args = parser.parse_args()

    # Configure logging
    configLog(args.debug)
    logging.debug('args:\n' + str(args))

    printResult = [['TITLE', 'DATE', 'GENRE', 'LENGTH', 'RATING', 'LINK']]
    printColWidth = [15, 10, 10, 10, 15, 40]

    # Read config.ini
    config = configparser.ConfigParser()

    config.read_file(open(os.path.dirname(__file__) + '/config.ini'))
    api_key = config['USER']['API_KEY']
    if not api_key:
        logging.critical('Empty API_KEY in config.ini')
        exit()

    # Set search type for movie or tv
    if args.tv is True or args.season is not None:
        searchType = 'tv'
    else:
        searchType = 'movie'

    # Set search url
    url = TMDB_API_URL + 'search/' + searchType + '?api_key=' + api_key + '&query=' + '%20'.join(args.searchtext)
    if args.year is not None:
        if searchType is 'tv':
            url += '&first_air_date_year=' + str(args.year)
        else:
            url += '&year=' + str(args.year)

    # Call TMDB search api to get result list
    resultList = GET(url)
    logging.debug('result list:\n' + str(resultList))

    # Search each movie/tv in list
    for item in resultList['results']:
        #   movie or tv
        if args.season is None:
            logging.debug('Fetch item id: ' + str(item['id']))
            itemData = GET(TMDB_API_URL + searchType + '/' + str(item['id']) + '?api_key=' + api_key)
            printResult.append(collectData(itemData))

        #   tv episode
        else:
            if item['first_air_date']:
                logging.debug('Fetch TV item id: ' + str(item['id']))
                itemData = GET(TMDB_API_URL + 'tv/' + str(item['id']) + '/season/' + str(args.season) + '?api_key=' + api_key)
                if 'episodes' in itemData.keys():
                    for episode in itemData['episodes']:
                        printResult.append(collectData(episode))

    # Print results in terminal
    printTable(printResult, printColWidth)


if __name__ == '__main__':
    main()
